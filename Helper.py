# int() - преобразовывает к целочисленному типу данных
# float() - преобразовывает к вещественному типу данных
# round("число", количество отбрасываемых чисел после запятой) - используется для округления чисел
# str() - преобразовывает к строковому типу данных
# bool() - преобразовывает к булеву типу данных
import os
import re

# input - функция для ввода данных


# print(bool("python"))  # True
# print(bool(""))  # False
# print(bool(" "))  # True
# print(bool(0))  # False
# print(bool(5))  # True
# print(bool(-5))  # True
# print(bool(None))  # False

# range(start, stop, step)

# import keyword
#   keyword.kwlist

#  \n - перенос на другую строку текста или кода
#  \r - убирает пробелы между строками

# append() - добавляет один элемент
# extend([]) - добавляет несколько элементов
# insert (индекс, значение) - Добавляет заданное значение (второй параметр) по указанному индексу
# remove() - удаляет элементы по значению
# pop() - Удаляет последний элемент из списка или по индексу, и возвращает удаляемый элемент
# clear()/del переменная[:] - очищает список, : - диапазон от какого и до какого значения
# reverse () - переворачивает массив
# sort() - сортировка по возрастанию, также в скобках можно добавить reverse=True
# sorted - также сортирует список
# print(dir(...)) - метод dir возвращает все, что есть в функции в скобках()
# значение.copy()  # возвращает копию списка, расположенную по другому адресу

# max - максимальное значения
# min - минимальное значение
# len - длина списка
# randint - рандомные числа
# randrange - зона чисел от какого и до какого

# import math - математические действия

# a & b - Пересечение множеств а и b
# a - b - Разность элементов, возвращает то что входит в a, и не входит в b
# a ^ b - Разность элементов, возвращает то что входит в a, и в b(разные числа)

# items() - Элементы(ключи и значения)
# keys() - Ключи
# values() - значения
# setdefault() - добавляет ключ и значение в словарь
# zip(*переменная) - распаковка кортежа или списка, если там по 2 и более элемента
# zip(**переменная) - распаковка словаря, если там по 2 и более элемента
# map () - Принцип работы, как и цикл
# filter() - Фильтрует и выводит нужные значения(принцип работы- цикл)
# @Переменная - Декоратор функции
# bin() - двоичная система счисления
# oct() - восьмеричная система счисления!
# hex() - Шестнадцатеричная система
# ord() - выдает юникод кодов символов (ascii)
# chr() - обратная от ord()

# nonlocal - Поднимает важность переменной на один уровень выше
# global - делает переменную глобальной
# __doc__  - документация любой функции(принцип работы). Синтаксис - """ Любой текст """

#######################################################
# #def typed(*args, **kwargs):
#     def wrapper(fn):
#         def wrap(*f_args, **f_kwargs):
#             return
#         return wrap
#     return wrapper
#
#
# @typed(int, int, int)
# def typed_fn(x, y, z):
#     return x * y * z
###############################################
# В параметры *args и **kwargs попадают - int, int, int;### fn - это имя функции def typed_fn;## в параметры *f_args и
# **f_kwargs попадают значения x, y, z
###############################################

####################### Префиксы строк ####################
# r"" - Игнорирует спецсимволы(Сырые строки)
# [:] - Срезы
# f" - позволяет сокращать код, без использования плюсов или запятых
# fr" - тот же принцип, что и f, но также делает экранирование спецсимволов
##################################################################

# print("Меня зовут " + name + ". Мне исполнилось " + str(age) + " лет")
# print("Меня зовут ", name, ". Мне исполнилось ", age, " лет", sep="")
# print(f"Меня зовут {name}. Мне исполнилось {age} лет")


#########################    Метод строк   #############################
# Capitalize() - Первую букву в верхний регистр, остальные в нижний!
# lower() - Все в нижний регистр
# upper() - Все в верхний регистр
# swapcase() - Меняет исходный регистр на противоположный!
# title() - Каждую первую буква слова в верхний регистр
# count(строка/Начало : конец) - поиск по буквам, подсчет их количества
# find(слово, буква или еще чего) - находит подстроку, откуда начинается нужное слово или буква
# rfind() - поиск идёт с правой стороны, находит первую букву справа, возвращает индекс(считая слева)
# index() - Принцип работы, как и find, ищет заданную строку, и возвращает индекс первого вхождения в строку, либо
# rindex() - обратное методу index(), находит первую букву справа, возвращает индекс(считая слева)

# возвращает исключение - Value Error
# isalnum() - Определяет, состоит ли строка только из цифр или букв. Возвращает булево
# isalpha() - Определяет, состоит ли строка только из букв. Возвращает булево
# isdigit() - Только из цифр
# islower() - состоит ли строка из строчных букв или цифр
# isupper() - состоит ли строка из букв верхнего регистра или цифр
# center () - выравнивание строки по центру
# lstrip() - удаляет пробелы с левой стороны / rstrip() - удаляет пробелы справа
# strip(указывается параметр - что нужно удалить, или откуда) - Удаляет пробелы слева и справа ( по краям)
# print('https://www.python.org'.lstrip('/:pths')) # Удаляет элементы в параметрах

# replace() - заменяет элемент
# join() - присоединение любого символа или еще чего к строке
# split() - разделяет слова пробелами, в параметрах указывается символ, который split ищет в строке и разделяет по этому
# символу(символ указывать в самой строке)

#################################### ТРЕБУЕТСЯ IMPORT/ #####################
# re.split('Сам символ', строка - где разделять)  - Разделяет по шаблону
# re.sub(Где заменить, На что заменить, куда выводить результат, (необазятельно) - количество заменяемых элементов)
# - Заменяет один шаблон на другой
# re.findall() - возвращает все совпадения
# re.search() - Возвращает только первое совпадение
# re.match() - Поиск по заданному шаблону в начале строки
#################################################

# rsplit() - обратная, разделяет справа налево


############################# search() - находит расположение первого места объекта

# search(*слово*, *Откуда искать*).span()) - От какого и до какого индекса
# search(*слово*, *Откуда искать*).start()) - начальный индекс
# search(*слово*, *Откуда искать*).end()) - Конечный индекс
# search(*слово*, *Откуда искать*).group(Указывается число, в зависимости от количества скобок, указывается скобка)) - Само совпадение


###################### Регулярные выражения ####################
# \A - Ищет сначала строки  | \Z - Ищет с конца строки
# \d - Ищет только Цифры    | \D - Ищет все кроме цифр
# \s - Ищет пробелы         | \S - Ищет все кроме пробелов
# \w - Ищет буквы, цифры или символы подчеркивания    | \W - Ищет все кроме букв, цифр и символов подчеркивания
# \b - Ищет символы в начале или конце слова        | \B - Ищет символы везде кроме НАЧАЛА строки и КОНЦА
##################       Повторения     ############################
# +  - от 1 до бесконечности
# *  - от 0 до бесконечности
# ?  - или 0, или 1 (Либо есть, либо нету)
# () - группирующая скобка ( выводит данные только в скобке)
# (?:) - группирующая скобка, сохраняющая (выводит полные данные в скобке и за ней)

# greedy (жадный квантификатор) - с вопросительным знаком
# lazy (ленивый  квантификатор) - без вопросительного

#####################    Квантификаторы    ###############
# {n} - количество повторений
# {m,n} - Количество повторений от m и до n включительно
# {m,} - не менее m повторений  | {,n} - Не более n повторений
######################   Метасимволы   ######################
# [] - символы для поиска вхождений
# \ - Сигнализирует о специальном символе, или экранировании символов
# . - Любой символ кроме новой строки
# ^ - строка начинается с
# $ - Строка заканчивается
# * - 0 или более вхождений
# + - 1 или более вхождений
# {} - количество вхождений
# | - ИЛИ
# () - группирует шаблон

######################    ФЛАГИ  #######################
# re.ASCII - только символы ASCII
# re.IGNORECASE - Проверка без учёта регистра
# re.MULTILINE - проверяет строку с начала и с конца, как ^ + $
# re.DOTALL - символ . включает перевод строки \n
############################################################

# [a-n] - ищет буквы между ними в нижнем регистре
# [an] - только a или n
# [^an] - выводить всё кроме букв a и n
# [0-9] - ищет от 0 до 9

############################## Файлы ############
# close - закрыть файл
# encoding - кодировка
# mode - "r"- чтение, "w" - Запись или удаление, ""
# name - имя
# open("название файла", mode="r"/"w"/) - открыть файл

#################  Методы open : ##############################
# 1) a - Запись, добавление данных в конец файла / a+ - позволяет читать и записывать новые данные
# 2) r - чтение данных / r+ - чтение и запись данных(без создания нового файла)
# 3) w - Создание файла / w+ чтение и запись файла(создает новый также)
# 4) b - бинарный режим
# 5) t - текстовый режим
# 6) + - Обновление (чтение и запись)
##########Синтаксис открытия через WITH:
# with open("название файла", режим) as любое рандомное имя:

# Syntax:
# ABC = open(file, mode="r", buffering=1, encoding="UTF-8", errors=None, newline=None, closefd=True, opener=None)
# file - Путь к файлу
# mode - режим чтения и записи
# buffering - целое число, используемое для политики буферизации
# errors - строка, которая указывает как обрабатываются ошибки кодирования
# newline - режим перевода строк - None,"\n", "\r" и '\r\n' только для текстовых файлов
# closefd - режим булево, флаг закрытия файлового дескриптора
# opener - пользовательский объект, возвращающий открытый дескриптор

####################################

# read - читать / readline- читать строку/ readlines - строки
# write - создать либо очистить файл
# tell - показывает позицию курсора в файле(где расположен)
# seek - задает параметр - куда переместить курсор мыши в файле


##########################  Модуль OS, через import os ######################
# os.getcwd() - указывает путь к папке проекта
# os.listdir() - возвращает список файлов, которые находятся в данной папке, в параметрах через 2 точки- можно выйти на уровень выше
# os.mkdir("Имя папки") - создаёт папку в дистрибутиве
# os.makedirs("") - Создает папку или папки, одна в другой
# os.remove() - удаляет файл по названию(в параметрах)
# os.rename() - переименовывает файлы или директории, также позволяет переносить файл в любую существующую папку
# os.renames() - принцип работы тот же, что и у rename, но также позволяет сразу же создать новую папку и перекинуть туда файл
# os.rmdir() - удаляет папку(только пустую), topdown - вывод инфо, либо снизу вверх, либо сверху вниз
# os.walk(root, dirs, files) - возвращает имена объектов в виде дерева директорий. Для каждой директории возвращает кортеж(ROOT - путь к директории,- DIRS - список директории, FILES - список файлов)

# os.path.split() - Разбивает путь на кортеж, состоит из двух частей - сам путь, и сам файл. В параметрах указывается путь к файлу
# os.path.dirname() - выводит сам путь до файла
# os.path.basename() - выводит имя файла
# os.path.join() - собирает путь из элементов.. В параметрах прописываются эллементы по порядку, через запятую
# os.path.exists() - Проверяет существует ли путь к файлу, выводит Булево значение
# os.path.getatime() - Возвращает время последнего доступа к файлу
# os.path.getctime() - Время создания файла
# os.path.getmtime() - Время последнего изменения файла
# os.path.getsize() - Размер файла в байтах
# os.path.isfile() - Это файл? Булево значение
# os.path.isdir() - Это директория? Булево значение


#######################################################  Конец БАЗОВОГО КУРСА ##########################################

############################################################## Классы ###############################
# Class название класса - Класс для представления координат точек на плоскости( Далее предоставляются значения класса)
# Атрибуты = Свойства + методы(вложенные функции)
# @staticmethod - делает функцию статической, привязанной к конкретному классу
# @classmethod - позволяет изменять переменные в классе, их свойства и значения

# Object - родитель всех классов

# Абстрактный метод - требует, чтоб был определен экземпляр класса. Создается другой экземпляр с таким же названием и выбросом
# исключения(создать этот метод ). Это объявленный метод, но не реализованный... Требует реализации в дочернем классе

# hasattr - возвращает булево значение, есть ли такой аттрибут или нет
# getattr - получение аттрибута класса
# setattr - выборка аттрибута класса
# delattr - удаление аттрибута класса

