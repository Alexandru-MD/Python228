# con = sq.connect('profile.db')  - Подключение
# cur = con.cursor()              - Курсор для работы с подключением
# cur.execute(""" """)            - Запросы
# con.close()                     - Закрыть соединение

# fetchall() - вернуть в кортеже данные (все данные)
# fetchone() - возвращает одну запись или строку

# fetchmany() - (выборка) возвращает список элементов, в параметрах передается количество нужных записей

# rollback() - откат базы данных к исходному состоянию, если вдруг возникает какая то ошибка
# iterdump() - сохраняет базу данных
###################=====================================================================================================
#     Переименование таблицы
# ALTER - изменение таблицы
# RENAME TO "новое имя" - изменить имя

#     Добавление столбца
# ALTER TABLE person_table
# ADD COLUMN address NOT NULL DEFAULT "street"

#     Переименование столбца
# ALTER - изменение таблицы
# RENAME COLUMN 'название столбца' TO "новое имя столбца" - изменить имя

# Удаление столбца
# ALTER TABLE person_table
# DROP COLUMN "название колонки"

# Добавление строки
# INSERT INTO "имя_таблицы" [(столбец_1[, столбец_n])]
# VALUES (значение_1[, значение_n])

# Добавление данных из одной таблицы в другую
# INSERT INTO имя_таблицы (как прописаны данные в таблице, в которую вставляем)
# SELECT список столбцов(как прописаны в другой таблице, откуда вставляем)
# FROM имя_таблицы

# Изменение существующих данных
# UPDATE имя_таблицы
# SET столбец_1=выражение_1, столбец_2=выражение_2    (SET - установить)

# Удаление данных по условию
# DELETE FROM таблица
# WHERE условие

# LIMIT - количество строк для вывода
# OFFSET - выбор начального диапазона, с какой записи выводить
# LIMIT 5 OFFSET 10 - с 10ого элемента (всего 5 элементов на вывод)
# LIMIT 10, 5 - Аналог предыдущего
#=======================================================================================================================

#=======================================================================================================================
# with sq.connect('profile.db') as con:
#     cur = con.cursor()
#     cur.execute(""" CREATE TABLE IF NOT EXISTS users (
    # cur.execute(""" CREATE TABLE IF NOT EXISTS users (
    # id INTEGER PRIMARY KEY AUTOINCREMENT,
    # name TEXT NOT NULL,
    # summa REAL,
    # data BLOB
    # )""")


#=======================================================================================================================

# Запрос в SQL
# SELECT - ВЫБРАТЬ
    # DISTINCT - исключает повторения в запросах
# FROM - ИЗ
    # WHERE условие ГДЕ (!=,<>, =, ==, >=, <=)
        # BETWEEN - МЕЖДУ
        # LIKE  - КАК (% - любое количество символов, _ - один символ)
        # GLOB "регулярное выражение" :
            # * - любое количество символов
            # ? - Один символ
            # . - любой одиночный символ
            # [abc] - один из заданных символов
            # [a-z0-9] - диапазон заданных символов
            # [^abc] - данные символы не выводить.. Выводить всё , кроме заданных
        # IS NULL - все строки со столбцами со значением NULL
        # [NOT] IN (набор значений) - выбирает каждый набор значений и выводит их
    # ORDER BY имя_поля [ASC|DESC] - СОРТИРОВКА по [возрастанию|убыванию]
    # GROUP BY  -  ГРУППИРОВКА по
    # HAVING (Условие - допустим функция агрегирования)
#=======================================================================================================================
# Функции Агрегирования ( в запросах)
# SUM() - (только с числами) - Суммирование по столбцу
# AVG() - (только с числами) - Среднее арифметическое
# COUNT()                    - Подсчёт значений
# MIN()
# MAX()
#===============================================================================
# SELECT Count(Client) AS 'Количество клиентов'
# SELECT Count(Client) AS [Количество клиентов]             #  Аналоги
# SELECT Count(Client) AS Количество
#=======================================================================================================================

##                         Метод Execute
# import sqlite3 as sq
#
# cars = [
#     ('BMW', 550000),
#     ('Chevrolet', 750000),
#     ('Lamborghini', 900000),
#     ('Daewoo', 450000),
#     ('Honda', 25000)
# ]
# with sq.connect("cars.db") as con:
#     cur = con.cursor()
#     cur.execute("""
#     CREATE TABLE IF NOT EXISTS cars(
#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,
#         model TEXT,
#         price INTEGER
#     )""")
#     for car in cars:
#         cur.execute("INSERT INTO cars VALUES(NULL, ?, ?)", car)


# cur.executescript()                           -    Выполняет несколько разных запросов

# cur.execute("UPDATE cars SET price = :Price WHERE model LIKE 'B%'", {'Price': 0})    # : - показывает имя.Ставит цену в 0

# cur.executemany("INSERT INTO cars VALUES(NULL, ?, ?)", cars)           # Выполняет много действий

# for car in cars:
#     cur.execute("INSERT INTO cars VALUES(NULL, ?, ?)", car)                   #  Аналог
#=======================================================================================================================
                                    # Сохранение и загрузка базы данных в файл
#=======================================================================================================================
# with sq.connect("cars.db") as con:
#     cur = con.cursor()

    # with open('sql_dump.sql', 'w') as f:
    #     for sql in con.iterdump():                                    #  Сохранение данных в sql документ
    #         f.write(sql)

    # with open('sql_dump.sql', 'r') as f:
    #     sql = f.read()                                                  #  Восстановление базы данных из sql документа
    #     cur.executescript(sql)
#=======================================================================================================================